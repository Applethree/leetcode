// Swap two variables of type T
template<typename T>
void Swap(T &a, T &b)
{
    T temp = a ;
    a = b ;
    b = temp ;
}

// t: the buffer to store the elements of type T
// k: the index of the first element 
// m: the index of the last elment
template<typename T>
void Perm(T t[], int k, int m) 
{
    if(k == m)
    {
        for(int i = 0; i <= k; i++)
        {
            cout << t[i] << " " ;
        }
        cout << endl ;
    }
    else
    {
        for(int i = k; i <= m; i++)
        {
            Swap(t[i], t[k]) ;
            Perm(t, k + 1, m) ;
            Swap(t[i], t[k]) ;
        }
    }
}


C++版的Swap函数还可以写成
void Swap(T *a, T *b)
{
    T temp = *a ;
    *a = *b ;
    *b = temp ;
}

但切忌不可写成， 这是值传递，对形参的改变并不影响实参，因为传递进来的是实参的一个副本，交换的仅仅是副本
void Swap(T a, T b)
{
    T temp = a ;
    a = b ;
    b = temp ;
}

解释一下代码：
void Perm(T t[], int k, int m)
t是待排列的数组，k和m是要进行排列的区间，调用的时候传入k=0, m = t.Length - 1就可以对整个数组进行排列了
实际上k和m是当前的排列区间的起点和终点，那么
k = m时，显然排列已经完成
k < m时，排列未完成，则依次取k和m之间的所有元素与当前的首元素交换，然后对区间k + 1, m重复此过程，排列完成后要将交换过的元素再交换
回去，继续下次排列，这就是有两个Swap的原因。
