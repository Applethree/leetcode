Anagrams指几个string有相同的字符，但不同的字符顺序。所以一个有效的检查方法是：
当两个string排序以后相同，则它们是anagrams。可以使用一个hash table，string s的key是它自己排序后的string，
这样anagrams会有相同的key。用一个vector<int>来记录相同key的string在input vector<string>中的index。
最后扫描一遍hash table，当有两个或以上string有相同的key时，将它们输出到结果。

class Solution {
public:
    vector<string> anagrams(vector<string> &strs) {
        vector<string> ret;
        unordered_map<string,vector<int>> ht;
        
        for(int i=0; i<strs.size(); i++) {
            string key = strs[i];
            sort(key.begin(),key.end());
            ht[key].push_back(i);
        }
            
        for(unordered_map<string,vector<int>>::iterator it=ht.begin(); it!=ht.end(); it++) {
            if(it->second.size()>1) {
                for(int i=0; i<it->second.size(); i++) {
                    ret.push_back(strs[it->second[i]]);    
                }
            }
        }
        return ret;
    }
}





这道题让我们群组给定字符串集中所有的错位词，所谓的错位词就是两个字符串中字母出现的次数都一样，只是位置不同，
比如abc，bac, cba等它们就互为错位词，那么我们如何判断两者是否是错位词呢，我们发现如果把错位词的字符顺序重新排列，
那么会得到相同的结果，所以重新排序是判断是否互为错位词的方法，由于错位词重新排序后都会得到相同的字符串，
我们以此作为key，将所有错位词都保存到字符串数组中，建立key和字符串数组之间的映射，最后再存入结果res中即可，擦巾代码如下：

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        vector<vector<string>> res;
        unordered_map<string, vector<string>> m;
        for (string str : strs) {
            string t = str;
            sort(t.begin(), t.end());
            m[t].push_back(str);
        }
        for (auto a : m) {
            res.push_back(a.second);
        }
        return res;
    }
};

下面这种解法没有用到排序，提高了运算效率，我们用一个大小为26的int数组来统计每个单词中字符出现的次数，然后将int数组转为一个唯一的字符串，
跟字符串数组进行映射，这样我们就不用给字符串排序了，代码如下：

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        vector<vector<string>> res;
        unordered_map<string, vector<string>> m;
        for (string str : strs) {
            vector<int> cnt(26, 0);
            string t = "";
            for (char c : str) ++cnt[c - 'a'];
            for (int d : cnt) t += to_string(d) + "/";
            m[t].push_back(str);
        }
        for (auto a : m) {
            res.push_back(a.second);
        }
        return res;
    }
};
